name: Security Scan Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-environment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Docker Compose
      run: |
        echo "Installing Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose configuration..."
        docker-compose config
        
    - name: Test Juice Shop Container
      run: |
        echo "Testing Juice Shop container startup..."
        docker-compose up -d
        sleep 30
        curl -f http://localhost:3000 || exit 1
        docker-compose down
        
    - name: Validate Scripts
      run: |
        echo "Validating PowerShell scripts..."
        # Verificar que los scripts PowerShell existen y son legibles
        if [ -f scripts/security_scan.ps1 ]; then
          echo "✅ security_scan.ps1 exists"
        else
          echo "❌ security_scan.ps1 not found"
          exit 1
        fi
        
        if [ -f scripts/setup.ps1 ]; then
          echo "✅ setup.ps1 exists"
        else
          echo "❌ setup.ps1 not found"
          exit 1
        fi
        
        if [ -f scripts/quick_test.ps1 ]; then
          echo "✅ quick_test.ps1 exists"
        else
          echo "❌ quick_test.ps1 not found"
          exit 1
        fi
        
        if [ -f scripts/cleanup.ps1 ]; then
          echo "✅ cleanup.ps1 exists"
        else
          echo "❌ cleanup.ps1 not found"
          exit 1
        fi
        
        echo "Validating Bash scripts..."
        # Verificar sintaxis de scripts Bash
        if [ -f scripts/security_scan.sh ]; then
          bash -n scripts/security_scan.sh && echo "✅ security_scan.sh syntax is valid"
        fi
        
        if [ -f scripts/setup.sh ]; then
          bash -n scripts/setup.sh && echo "✅ setup.sh syntax is valid"
        fi
        
        if [ -f scripts/quick_test.sh ]; then
          bash -n scripts/quick_test.sh && echo "✅ quick_test.sh syntax is valid"
        fi
        
    - name: Check Dependencies
      run: |
        echo "Checking project dependencies..."
        # Verificar que docker-compose.yml existe
        test -f docker-compose.yml || exit 1
        
        # Verificar que los scripts existen
        test -f scripts/security_scan.sh || exit 1
        test -f scripts/setup.sh || exit 1
        test -f scripts/security_scan.ps1 || exit 1
        test -f scripts/setup.ps1 || exit 1
        
    - name: Validate Documentation
      run: |
        echo "Validating documentation..."
        # Verificar que README.md existe
        test -f README.md || exit 1
        
        # Verificar que LICENSE existe
        test -f LICENSE || exit 1
        
    - name: Security Check
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: high
        
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive data
      run: |
        echo "Checking for sensitive data in code..."
        # Verificar que no hay claves hardcodeadas
        if grep -r "password\|secret\|key\|token" scripts/ --exclude="*.log" | grep -v "api.key" | grep -v "ZAP_API_KEY"; then
          echo "Warning: Potential sensitive data found"
        fi
        
    - name: Validate file structure
      run: |
        echo "Validating project structure..."
        
        # Verificar archivos principales (obligatorios)
        echo "Checking required files..."
        test -f docker-compose.yml || (echo "❌ docker-compose.yml not found" && exit 1)
        test -f README.md || (echo "❌ README.md not found" && exit 1)
        test -f LICENSE || (echo "❌ LICENSE not found" && exit 1)
        test -f .gitignore || (echo "❌ .gitignore not found" && exit 1)
        
        # Verificar directorios principales
        echo "Checking required directories..."
        test -d scripts/ || (echo "❌ scripts/ directory not found" && exit 1)
        
        # Verificar directorios opcionales (crear si no existen)
        echo "Checking optional directories..."
        mkdir -p reports/ logs/
        
        # Verificar scripts principales
        echo "Checking required scripts..."
        test -f scripts/security_scan.ps1 || (echo "❌ scripts/security_scan.ps1 not found" && exit 1)
        test -f scripts/setup.ps1 || (echo "❌ scripts/setup.ps1 not found" && exit 1)
        
        echo "✅ Project structure is valid"